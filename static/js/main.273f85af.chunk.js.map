{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","Tweet","props","handleTweet","setState","link","quote","author","state","href","this","onClick","target","className","style","styling","React","Component","GetQuote","handleClick","json","cont","XMLHttpRequest","open","send","onload","JSON","parse","responseText","content","handleColor","colors","index","Math","floor","random","BackgroundChange","backgroundColor","transition","TextChange","color","tweet","opacity","first","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qKAAAA,EAAOC,QAAU,IAA0B,kC,+HCKrCC,G,oEACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAORC,YAAc,WAEX,EAAKC,SACP,CACCC,KAAO,yCAA2C,EAAKH,MAAMI,MAAtD,MAA2E,EAAKJ,MAAMK,UAT7F,EAAKC,MAAQ,CACXH,KAAO,IAJQ,E,qDAmBhB,OACC,6BACC,uBAAGI,KAAMC,KAAKF,MAAMH,KAAMM,QAASD,KAAKP,YAAaS,OAAO,UAAS,4BAAQC,UAAU,eAAeC,MAAOJ,KAAKR,MAAMa,SAAS,uBAAGF,UAAU,yB,GAtBjIG,IAAMC,YA4BpBC,E,kDACJ,WAAYhB,GAAQ,IAAD,8BACjB,cAAMA,IAkCRiB,YAAc,WAGZ,IAAIC,EAAO,GACLC,EAAO,IAAIC,eACjBD,EAAKE,KAAK,MAAM,kCAAiC,GACjDF,EAAKG,OAERH,EAAKI,OAAS,WAEbL,EAAOM,KAAKC,MAAMN,EAAKO,cACrB,EAAKxB,SACN,CAACE,MAAOc,EAAKS,QAAStB,OAAQa,EAAKb,WA/CjB,EAuDnBuB,YAAc,WAGb,IAAIC,EACH,CAAC,OAAO,UAAU,MAAM,QAAQ,SAAS,SAAS,OAAO,OAAO,SAAS,QAAQ,UAC9EC,EAAMC,KAAKC,MAAuB,GAAjBD,KAAKE,SAAkB,GAC3C,EAAK/B,SACN,CAACgC,iBAAkB,CAACC,gBAAiBN,EAAOC,GAAQM,WAAY,+BAA+BC,WAAY,CAACC,MAAQT,EAAOC,GAAQM,WAAY,uBA3D9I,EAAK9B,MAAQ,CACXF,MAAO,GACPC,OAAQ,GACRkC,OAAO,EACPL,iBAAkB,CAACC,gBAAiB,SACpCE,WAAa,CAACC,MAAO,QAASF,WAAY,GAC1CI,QAAS,IACTrC,KAAO,IAVQ,E,gEAgBlB,IAAD,OAEGK,KAAKoB,cACL,IAAMT,EAAO,IAAIC,eACjBD,EAAKE,KAAK,MAAM,kCAAiC,GACjDF,EAAKG,OAEPH,EAAKI,OAAS,WAEb,IAAIkB,EACJA,EAAQjB,KAAKC,MAAMN,EAAKO,cAExB,EAAKxB,SACL,CAACE,MAAOqC,EAAMd,QAAStB,OAAQoC,EAAMpC,Y,+BAsC7B,IAAD,OAET,OACI,yBAAKO,MAAOJ,KAAKF,MAAM4B,iBAAkBvB,UAAU,aACnD,yBAAKA,UAAU,aACf,wBAAIC,MAAOJ,KAAKF,MAAM+B,WAAY1B,UAAU,QAAQH,KAAKF,MAAMF,OAC/D,wBAAIQ,MAAOJ,KAAKF,MAAM+B,WAAY1B,UAAU,UAAUH,KAAKF,MAAMD,QAEjE,kBAAC,EAAD,CAAOQ,QAASL,KAAKF,MAAM4B,iBAAkB9B,MAAOI,KAAKF,MAAMF,MAAOC,OAAQG,KAAKF,MAAMD,SAEzF,yBAAKM,UAAU,WAAf,IAA0B,4BAAQA,UAAU,YAAYF,QAAU,WAAO,EAAKmB,cAAc,EAAKX,eAAiBL,MAAOJ,KAAKF,MAAM4B,kBAA1G,oB,GA9ETpB,IAAMC,WAqGd2B,E,kDAdb,WAAY1C,GAAQ,uCACZA,G,qDAIN,OACE,6BACA,kBAAC,EAAD,W,GARYc,IAAMC,WC3GJ4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.273f85af.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport 'font-awesome/css/font-awesome.min.css'\n\nclass Tweet extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      link : ''\n    };\n  }\n \n  handleTweet = () =>\n   {\n     this.setState(\n   {\n    link : \"https://twitter.com/intent/tweet?text=\" + this.props.quote + \" \" + \"- \" + this.props.author}\n   );\n     \n   }\n \n  render() {\n  \n     return(\n      <div>\n       <a href={this.state.link} onClick={this.handleTweet} target=\"_blank\"><button className=\"tweet-design\" style={this.props.styling}><i className=\"fa fa-twitter\"></i></button></a>  \n      </div>);\n   \n  }\n}\n\nclass GetQuote extends React.Component {\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      quote: '',\n      author: '',\n      tweet: false,\n      BackgroundChange: {backgroundColor: \"green\"},\n      TextChange : {color: \"green\", transition: '',\n      opacity: ''},\n      link : ''\n    };\n    \n  }\n  \n  componentDidMount()\n  {\n    \n     this.handleColor()\n     const cont = new XMLHttpRequest();\n     cont.open(\"GET\",\"https://api.quotable.io/random\",true);\n     cont.send();\n  \n   cont.onload = () =>\n  {\n    let first = {}\n    first = JSON.parse(cont.responseText);\n     \n    this.setState(\n    {quote: first.content, author: first.author}\n    );\n  }\n   \n}\n  \n  handleClick = () =>\n  {\n   \n    let json = {};\n    const cont = new XMLHttpRequest();\n    cont.open(\"GET\",\"https://api.quotable.io/random\",true);\n    cont.send();\n  \n cont.onload = () =>\n{\n  json = JSON.parse(cont.responseText);\n    this.setState(\n   {quote: json.content, author: json.author}\n   );\n  \n }\n \n } \n  \n  \n  handleColor = () =>\n  {\n      \n   let colors = \n    [\"blue\",\"crimson\",\"red\",\"green\",\"orange\",\"purple\",\"pink\",\"grey\",\"indigo\",\"brown\",\"yellow\"];\n   let index=Math.floor(Math.random() * (10) + 0);\n    this.setState(\n   {BackgroundChange: {backgroundColor: colors[index], transition: \"background-color 1s ease-in\"},TextChange: {color : colors[index], transition: \"color 1s ease-in\"}}\n   );\n     \n  }\n  \n  render() {\n    \n  return (\n      <div style={this.state.BackgroundChange} className=\"full-page\">\n      <div className=\"quote-box\">\n      <h1 style={this.state.TextChange} className=\"text\">{this.state.quote}</h1>\n      <h1 style={this.state.TextChange} className=\"author\">{this.state.author}</h1>\n       \n      <Tweet styling={this.state.BackgroundChange} quote={this.state.quote} author={this.state.author} />\n         \n      <div className=\"styling\"> <button className=\"new-quote\" onClick={ () => {this.handleColor();this.handleClick();}} style={this.state.BackgroundChange}>New quote</button></div>\n      </div>\n      </div>\n    );\n  }\n}\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div>\n      <GetQuote/>\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}